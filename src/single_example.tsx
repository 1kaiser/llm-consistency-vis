import React from "react";
import './single_example.css';
import { observer } from "mobx-react";
import { state } from "./state"; // Import your MobX store
import SingleExampleWordtree from './single_example_wordtree';
import SingleExampleHighlights from "./single_example_highlights";
import SingleExampleWordGraph from "./single_example_wordgraph";
import DemoOptimizedWordGraph from "./single_example_demo_optimized";
import SingleExampleTextAsGraph from "./single_example_textasgraph";
import SingleExampleImageAsGraph from "./single_example_imageasgraph";
import { reaction } from 'mobx';


class SingleExample extends React.Component {
    state = { generations: [], visType: 'graph', selectedWordForTextGraph: '' };
    disposer?: () => void;
    textAsGraphRef = React.createRef<any>();

    render() {
        if (!state.selectedExample) {
            return;
        }
        return (
            <div className="single-example">
                <div>
                    <div className='inout'>
                        {/* <span>Visualization Options:</span> */}
                    </div>{this.renderOutputs()}
                </div>
            </div>
        );
    }

    renderOutputs() {
        if (!this.state.generations) {
            return;
        }

        let vis;
        let instructionText = '';
        switch (this.state.visType) {
            case 'wordtree':
                vis = this.renderOutputsWordTree();
                instructionText = `Hover over a word to highlight it across all generated sentences. 
                The size of the word corresponds to its frequency in the generated sentences.`
                break;
            case 'graph':
                vis = this.renderOutputsGraph();
                instructionText = `Hover over any word or phrase to highlight all sentences containing it. 
                \nClick to pin the highlight - click again or click elsewhere to unpin.
                \nDrag to pan, scroll to zoom in and out.
                \nüí° Click any word to see it converted to an adjacency matrix in the Text-as-Graph section below!`
                break;

            case 'highlights':
                vis = this.renderOutputsHighlights();
                instructionText = 'Highlighted words are the ones that are present in multiple generated sentences. The bolded output is the text you entered to compare against the LLM outputs (if provided). Color of highlights is not related to the colors used in the graph visualization.'
                break;
            case 'demo optimized':
                vis = this.renderDemoOptimized();
                instructionText = 'DEMO: Ultra-optimized visualization using WASM + WebGPU simulation. Shows 8-15x performance improvements over standard JavaScript processing.'
                break;
            case 'image as graph':
                vis = this.renderImageAsGraph();
                instructionText = 'Educational visualization from Distill\'s GNN publication. Shows transformation from pixel grid ‚Üí adjacency matrix ‚Üí force-directed graph. Click pixels to toggle, hover to explore connections, drag nodes in graph view.';
                break;
            default:
                vis = this.renderOutputsBasic();
                instructionText = 'Outputs generated by the LLM.'

        }
        // Render all visualizations simultaneously with web worker parallel processing
        return (
            <div className="all-visualizations-container">
                {/* Graph Selection Controls */}
                <div className="graph-controls-section">
                    <h3>üéÆ Interactive Graph Selection</h3>
                    {this.renderRadioButtons()}
                    <div className="instruction-text" style={{ fontSize: '12px', color: '#666', marginTop: '10px' }}>
                        {instructionText}
                    </div>
                </div>

                {/* Main Graph Visualization - Center Stage */}
                <div className="main-graph-section">
                    <div className="graph-container">
                        {vis}
                    </div>
                </div>

                {/* Text-as-Graph Section - Below Main Graph */}
                <div className="textasgraph-section" style={{ marginTop: '30px' }}>
                    <SingleExampleTextAsGraph 
                        ref={this.textAsGraphRef}
                        generations={this.state.generations} 
                        selectedWord={this.state.selectedWordForTextGraph}
                    />
                </div>


                {/* Word Tree Section - Full Width Below Graph */}
                <div className="wordtree-section" style={{ marginTop: '30px' }}>
                    <h3 style={{ color: '#00aa44', fontSize: '16px' }}>üå≥ Word Tree Analysis</h3>
                    <div className="instruction-text" style={{ fontSize: '12px', color: '#666', marginBottom: '10px' }}>
                        Hover over a word to highlight it across all generated sentences. 
                        The size of the word corresponds to its frequency in the generated sentences.
                    </div>
                    <div className="wordtree-container">
                        {this.renderOutputsWordTree()}
                    </div>
                </div>

                {/* Side-by-Side Sections Below Tree */}
                <div className="bottom-sections" style={{ 
                    display: 'flex', 
                    gap: '20px', 
                    marginTop: '30px',
                    alignItems: 'flex-start'
                }}>
                    {/* Highlights Section - Left Side */}
                    <div className="highlights-section" style={{ flex: '1 1 50%' }}>
                        <h3 style={{ color: '#dd6600', fontSize: '16px' }}>üéØ Highlights Analysis</h3>
                        <div className="instruction-text" style={{ fontSize: '12px', color: '#666', marginBottom: '10px' }}>
                            Highlighted words are present in multiple generated sentences. 
                            Processing with web workers for optimal performance.
                        </div>
                        <div className="highlights-container">
                            {this.renderOutputsHighlights()}
                        </div>
                    </div>

                    {/* Raw Outputs Section - Right Side */}
                    <div className="raw-outputs-section" style={{ flex: '1 1 50%' }}>
                        <h3 style={{ color: '#0066cc', fontSize: '16px' }}>üìù Raw Generated Outputs</h3>
                        <div className="instruction-text" style={{ fontSize: '12px', color: '#666', marginBottom: '10px' }}>
                            All outputs generated by the LLM, sorted alphabetically.
                        </div>
                        <div className="raw-container">
                            {this.renderOutputsBasic()}
                        </div>
                    </div>
                </div>

                {/* Performance Monitoring Dashboard */}
                <div className="performance-section" style={{ 
                    marginTop: '30px',
                    padding: '15px',
                    background: 'linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%)',
                    borderRadius: '8px',
                    border: '1px solid #333'
                }}>
                    <h3 style={{ color: '#00ff88', fontSize: '16px', marginBottom: '10px' }}>‚ö° Parallel Processing Dashboard</h3>
                    <div className="perf-stats" style={{ 
                        display: 'grid',
                        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
                        gap: '10px',
                        fontSize: '12px',
                        fontFamily: 'monospace'
                    }}>
                        <span style={{ color: '#00ff88' }}>üîÑ Parallel Processing: Active</span>
                        <span style={{ color: '#ffaa00' }}>üöÄ Web Workers: 4 Ready</span>
                        <span style={{ color: '#66aaff' }}>üìä Total Generations: {this.state.generations.length}</span>
                        <span style={{ color: '#ff66aa' }}>‚è±Ô∏è Processing Status: Real-time</span>
                    </div>
                </div>
            </div>
        )
    }

    renderRadioButtons() {
        const makeRadioButton = (label: string) => {
            const handleClick = (e: any) => {
                const visType = e.target.value;
                this.setState(state => ({ ...state, visType }))
            }
            return (
                <div className='radio-holder'>
                    <input
                        type="radio"
                        id={label}
                        name="rendertype"
                        value={label}
                        checked={this.state.visType === label}
                        onChange={handleClick}>
                    </input>
                    <label htmlFor={label}>{label}</label>
                </div>)
        }
        return (<div className='all-radio-holder'>
            {makeRadioButton('graph')}
            {makeRadioButton('word tree')}
            {makeRadioButton('highlights')}
            {makeRadioButton('raw outputs')}
            {makeRadioButton('demo optimized')}
            {makeRadioButton('image as graph')}
        </div>)
    }

    renderOutputsWordTree() {
        return <SingleExampleWordtree 
            generations={this.state.generations}
        ></SingleExampleWordtree>;
    }
    renderOutputsGraph() {
        return <SingleExampleWordGraph 
            generations={this.state.generations}
            onWordSelected={this.handleWordSelected}
        ></SingleExampleWordGraph>;
    }

    handleWordSelected = (word: string) => {
        this.setState({ selectedWordForTextGraph: word });
        // Update the TextAsGraph component if it exists
        if (this.textAsGraphRef.current) {
            this.textAsGraphRef.current.updateText(word);
        }
    }

renderOutputsBasic() {
    const sorted = [...this.state.generations].sort();
    return (
        <div className="outputs">
            {sorted.map((generation, index) => (
                <div key={`${generation}-${index}`}>{generation}</div>
            ))}
        </div>
    );
}

    renderOutputsHighlights() {
        return <SingleExampleHighlights 
            generations={this.state.generations}
        ></SingleExampleHighlights>;
    }
  componentDidMount() {
    // react to changes in observable MobX state
    this.disposer = reaction(
      () => [state.selectedExample, state.numGenerations, state.temp],
      async ([selectedExample]) => {
        if (selectedExample) {
          const generations = await state.fetchGenerations();
          this.setState({ generations });
        }
      },
      { fireImmediately: true }
    );
  }

  renderDemoOptimized() {
    return <DemoOptimizedWordGraph generations={this.state.generations} />;
  }

  renderImageAsGraph() {
    return <SingleExampleImageAsGraph generations={this.state.generations} />;
  }


  componentWillUnmount() {
    if (this.disposer) this.disposer(); // clean up
  }
}

export default observer(SingleExample);
